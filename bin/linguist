#!/usr/bin/env ruby

# linguist â€” detect language type for a file, or, given a directory, determine language breakdown
#     usage: linguist <path> [<--breakdown>]

require 'linguist/file_blob'
require 'linguist/language'
require 'linguist/repository'

require 'find'

path = ARGV[0] || Dir.pwd

# special case if not given a directory but still given the --breakdown option
if path == "--breakdown"
  path = Dir.pwd
  breakdown = true
end

ARGV.shift
breakdown = true if ARGV[0] == "--breakdown"

if File.directory?(path)
  files = Find.find(path).select do |file|
    File.file?(file)
  end

  languages = files.reduce({}) do |memo, file|
    if File.file?(file)
      language = Linguist::FileBlob.new(file).language
      if language
        memo[language] = [] unless memo.has_key?(language)
        memo[language] << file
      end
    end
    memo
  end.to_a.sort_by do |language, list|
    [- list.length, language.to_s.downcase]
  end

  languages.each do |language, list|
    percentage = ((list.length.to_f / files.length) * 100)
    percentage = sprintf '%.2f' % percentage
    puts "%-7s %s" % ["#{percentage}%", language]
  end
  if breakdown
    puts
    languages.each do |language, list|
      puts "#{language}:"
      list.each do |file|
        puts file
      end
      puts
    end
  end
elsif File.file?(path)
  blob = Linguist::FileBlob.new(path, Dir.pwd)
  type = if blob.text?
    'Text'
  elsif blob.image?
    'Image'
  else
    'Binary'
  end

  puts "#{blob.name}: #{blob.loc} lines (#{blob.sloc} sloc)"
  puts "  type:      #{type}"
  puts "  mime type: #{blob.mime_type}"
  puts "  language:  #{blob.language}"

  if blob.large?
    puts "  blob is too large to be shown"
  end

  if blob.generated?
    puts "  appears to be generated source code"
  end

  if blob.vendored?
    puts "  appears to be a vendored file"
  end
else
  abort "usage: linguist <path>"
end
